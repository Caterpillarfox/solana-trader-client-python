import base64
import unittest

import base58
from solana.keypair import Keypair

from bxsolana.transaction.deserializer import PartialTransaction

# key generated for this test
RANDOM_PRIVATE_KEY = "2RTpGMbfK2F4VNxMwTUdoaxgqh837NQg7sBnvv6C6bUmswJfG4eZ6gZb7qtsnaLAGftJW3XjmXYwDX91kJGEtkkh"
UNSIGNED_TX_BASE64 = "AgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABbqMO1naqyX2pXt5r/M/lbVG4AJo25JAZOPdxzTR20O9wBPcSo/haHeK/y5d9quE823ycX2P04cfrUFjwhKnkDAgAGEIls26fgpAnCYufUzDrXMMpDjMYkf2Y2FHuxqKE+2+IrqlXf7Qtg+iNNWHLp5EkyLgE6Zs6D0t2ssRfXrXHWFO5qxMPO+p8Zv1TI3A9eTRzu5TJ9JkgrKdKxPLqkNEchjeQTBcZ30N4UFbquVSNklrtTZGoyzqrep6uSS5UUAYeQqUNpofphjJYDGcmbFeqKg3p+Y1sXgGjP6XzrYw7WDPRrEDIxyXUFDOyNpt5ANXybymDvno8zFlolVmVlKoJTO0ZSeUngp6ZZ+KrchrxTzHxCRpoXdlqbrWKxsFvIaLXuyb65sW0YqCc5du+Jt/3oSuybqsoNsXPbj9pK4N5HijSoS7ZGYkZ4HXqa2rhYi6hrKszlE1jIRPVETkBkCHX9WkydmX0uxDvcDSNiac+w0IORr9ED/Y+9Y0U/9YtuI6kgBpuIV/6rgYT7aH9jRhjANdrEOdwa6ztVmKDwAAAAAAEGp9UXGSxcUSGMyUw9SvF/WNruCJuh/UTj29mKAAAAAAbd9uHXZaGT2cvhRs7reawctIXtX1s3kTqM9YV+/wCpAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAANB1GoKC2mEwX+KZw3uZjlhHHbETUDcxD4vhBFpgr27vOhBA/YJb+FjB3SXIbz9mWbwz0Kuj54mmKlLK7JmfeBeyG9xPJsofTYjtYaYK9Q6qToB65V7TW9JbOETcYleqwFDQIAATQAAAAAgFiEDAAAAAClAAAAAAAAAAbd9uHXZaGT2cvhRs7reawctIXtX1s3kTqM9YV+/wCpDAQBCgALAQEODAIDBAUGBwEACAkMCzMACgAAAAEAAAAAwusLAAAAAGQAAAAAAAAAAMgXqAQAAAAAAAAAAAAAAAAAAAAAAAAA//8PAB9Qb3dlcmVkIGJ5IGJsb1hyb3V0ZSBUcmFkZXIgQXBpDAMBAAABCQ=="
EXPECTED = b"AqXuZ3cHVI4WE6Kus6iXzBIptXPsqOk5h5umwzWEGQS+iAOgwlGGVPHDsQaVXquB6ddpeIBN9hJhDbeMtCOxKQtbqMO1naqyX2pXt5r/M/lbVG4AJo25JAZOPdxzTR20O9wBPcSo/haHeK/y5d9quE823ycX2P04cfrUFjwhKnkDAgAGEIls26fgpAnCYufUzDrXMMpDjMYkf2Y2FHuxqKE+2+IrqlXf7Qtg+iNNWHLp5EkyLgE6Zs6D0t2ssRfXrXHWFO5qxMPO+p8Zv1TI3A9eTRzu5TJ9JkgrKdKxPLqkNEchjeQTBcZ30N4UFbquVSNklrtTZGoyzqrep6uSS5UUAYeQqUNpofphjJYDGcmbFeqKg3p+Y1sXgGjP6XzrYw7WDPRrEDIxyXUFDOyNpt5ANXybymDvno8zFlolVmVlKoJTO0ZSeUngp6ZZ+KrchrxTzHxCRpoXdlqbrWKxsFvIaLXuyb65sW0YqCc5du+Jt/3oSuybqsoNsXPbj9pK4N5HijSoS7ZGYkZ4HXqa2rhYi6hrKszlE1jIRPVETkBkCHX9WkydmX0uxDvcDSNiac+w0IORr9ED/Y+9Y0U/9YtuI6kgBpuIV/6rgYT7aH9jRhjANdrEOdwa6ztVmKDwAAAAAAEGp9UXGSxcUSGMyUw9SvF/WNruCJuh/UTj29mKAAAAAAbd9uHXZaGT2cvhRs7reawctIXtX1s3kTqM9YV+/wCpAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAANB1GoKC2mEwX+KZw3uZjlhHHbETUDcxD4vhBFpgr27vOhBA/YJb+FjB3SXIbz9mWbwz0Kuj54mmKlLK7JmfeBeyG9xPJsofTYjtYaYK9Q6qToB65V7TW9JbOETcYleqwFDQIAATQAAAAAgFiEDAAAAAClAAAAAAAAAAbd9uHXZaGT2cvhRs7reawctIXtX1s3kTqM9YV+/wCpDAQBCgALAQEODAIDBAUGBwEACAkMCzMACgAAAAEAAAAAwusLAAAAAGQAAAAAAAAAAMgXqAQAAAAAAAAAAAAAAAAAAAAAAAAA//8PAB9Qb3dlcmVkIGJ5IGJsb1hyb3V0ZSBUcmFkZXIgQXBpDAMBAAABCQ=="


class TestSigning(unittest.TestCase):
    def test_sign_tx(self):
        pkey_bytes = bytes(RANDOM_PRIVATE_KEY, encoding="utf-8")
        pkey_bytes_base58 = base58.b58decode(pkey_bytes)
        kp = Keypair.from_secret_key(pkey_bytes_base58)

        partial_tx = PartialTransaction.deserialize(UNSIGNED_TX_BASE64)
        partial_tx.complete_signing(kp)
        signed_tx_base64 = base64.b64encode(partial_tx.serialize())

        self.assertEqual(EXPECTED, signed_tx_base64)
